"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/MermaidChart.tsx":
/*!*****************************************!*\
  !*** ./src/components/MermaidChart.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ generateMermaidChart; }\n/* harmony export */ });\nfunction generateMermaidChart(utterances, dialogs, services) {\n    let diagram = \"graph LR\\n\";\n    let utteranceCounter = 0;\n    let dialogCounter = 0;\n    // Construct diagram string for utterances and dialogs\n    utterances.forEach((utterance)=>{\n        if (utterance.dialogKey) {\n            const utteranceId = \"Utterance_\".concat(utteranceCounter++);\n            const dialogId = \"Dialog_\".concat(dialogCounter++);\n            diagram += \"\".concat(utteranceId, '[\"').concat(utterance.utterance, '\"] --> ').concat(dialogId, \"\\n\");\n        }\n    });\n    // Reset dialog counter for dialog to service mapping\n    dialogCounter = 0;\n    // Construct diagram string for dialogs and services\n    dialogs.forEach((dialog)=>{\n        const dialogId = \"Dialog_\".concat(dialogCounter++);\n        const service = services.find((s)=>s.name === dialog.serviceKey);\n        if (service) {\n            const serviceId = \"Service_\".concat(service.name.replace(/\\s/g, \"_\"));\n            diagram += \"\".concat(dialogId, \" --> \").concat(serviceId, '[\"').concat(service.name, '\"]\\n');\n        }\n    });\n    // Log the final diagram string\n    console.log(\"Mermaid Diagram:\", diagram);\n    // Create a new mermaid div\n    const mermaidDiv = document.createElement(\"div\");\n    mermaidDiv.className = \"mermaid\";\n    mermaidDiv.innerHTML = diagram;\n    return diagram;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL01lcm1haWRDaGFydC50c3giLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLHFCQUFxQkMsVUFBaUIsRUFBRUMsT0FBYyxFQUFFQyxRQUFlO0lBRTNGLElBQUlDLFVBQVU7SUFDZCxJQUFJQyxtQkFBbUI7SUFDdkIsSUFBSUMsZ0JBQWdCO0lBRXBCLHNEQUFzRDtJQUN0REwsV0FBV00sT0FBTyxDQUFDQyxDQUFBQTtRQUNmLElBQUlBLFVBQVVDLFNBQVMsRUFBRTtZQUNyQixNQUFNQyxjQUFjLGFBQWdDLE9BQW5CTDtZQUNqQyxNQUFNTSxXQUFXLFVBQTBCLE9BQWhCTDtZQUMzQkYsV0FBVyxHQUFtQkksT0FBaEJFLGFBQVksTUFBaUNDLE9BQTdCSCxVQUFVQSxTQUFTLEVBQUMsV0FBa0IsT0FBVEcsVUFBUztRQUN4RTtJQUNKO0lBRUEscURBQXFEO0lBQ3JETCxnQkFBZ0I7SUFFaEIsb0RBQW9EO0lBQ3BESixRQUFRSyxPQUFPLENBQUNLLENBQUFBO1FBQ1osTUFBTUQsV0FBVyxVQUEwQixPQUFoQkw7UUFDM0IsTUFBTU8sVUFBVVYsU0FBU1csSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxJQUFJLEtBQUtKLE9BQU9LLFVBQVU7UUFDL0QsSUFBSUosU0FBUztZQUNULE1BQU1LLFlBQVksV0FBNEMsT0FBakNMLFFBQVFHLElBQUksQ0FBQ0csT0FBTyxDQUFDLE9BQU87WUFDekRmLFdBQVcsR0FBbUJjLE9BQWhCUCxVQUFTLFNBQXFCRSxPQUFkSyxXQUFVLE1BQWlCLE9BQWJMLFFBQVFHLElBQUksRUFBQztRQUM3RDtJQUNKO0lBRUEsK0JBQStCO0lBQy9CSSxRQUFRQyxHQUFHLENBQUMsb0JBQW9CakI7SUFFaEMsMkJBQTJCO0lBQzNCLE1BQU1rQixhQUFhQyxTQUFTQyxhQUFhLENBQUM7SUFDMUNGLFdBQVdHLFNBQVMsR0FBRztJQUN2QkgsV0FBV0ksU0FBUyxHQUFHdEI7SUFFdkIsT0FBT0E7QUFDWCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9zcmMvY29tcG9uZW50cy9NZXJtYWlkQ2hhcnQudHN4PzhhMzQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVNZXJtYWlkQ2hhcnQodXR0ZXJhbmNlczogYW55W10sIGRpYWxvZ3M6IGFueVtdLCBzZXJ2aWNlczogYW55W10pIHtcblxuICAgIGxldCBkaWFncmFtID0gJ2dyYXBoIExSXFxuJztcbiAgICBsZXQgdXR0ZXJhbmNlQ291bnRlciA9IDA7XG4gICAgbGV0IGRpYWxvZ0NvdW50ZXIgPSAwO1xuXG4gICAgLy8gQ29uc3RydWN0IGRpYWdyYW0gc3RyaW5nIGZvciB1dHRlcmFuY2VzIGFuZCBkaWFsb2dzXG4gICAgdXR0ZXJhbmNlcy5mb3JFYWNoKHV0dGVyYW5jZSA9PiB7XG4gICAgICAgIGlmICh1dHRlcmFuY2UuZGlhbG9nS2V5KSB7XG4gICAgICAgICAgICBjb25zdCB1dHRlcmFuY2VJZCA9IGBVdHRlcmFuY2VfJHt1dHRlcmFuY2VDb3VudGVyKyt9YDtcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZ0lkID0gYERpYWxvZ18ke2RpYWxvZ0NvdW50ZXIrK31gO1xuICAgICAgICAgICAgZGlhZ3JhbSArPSBgJHt1dHRlcmFuY2VJZH1bXCIke3V0dGVyYW5jZS51dHRlcmFuY2V9XCJdIC0tPiAke2RpYWxvZ0lkfVxcbmA7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFJlc2V0IGRpYWxvZyBjb3VudGVyIGZvciBkaWFsb2cgdG8gc2VydmljZSBtYXBwaW5nXG4gICAgZGlhbG9nQ291bnRlciA9IDA7XG5cbiAgICAvLyBDb25zdHJ1Y3QgZGlhZ3JhbSBzdHJpbmcgZm9yIGRpYWxvZ3MgYW5kIHNlcnZpY2VzXG4gICAgZGlhbG9ncy5mb3JFYWNoKGRpYWxvZyA9PiB7XG4gICAgICAgIGNvbnN0IGRpYWxvZ0lkID0gYERpYWxvZ18ke2RpYWxvZ0NvdW50ZXIrK31gO1xuICAgICAgICBjb25zdCBzZXJ2aWNlID0gc2VydmljZXMuZmluZChzID0+IHMubmFtZSA9PT0gZGlhbG9nLnNlcnZpY2VLZXkpO1xuICAgICAgICBpZiAoc2VydmljZSkge1xuICAgICAgICAgICAgY29uc3Qgc2VydmljZUlkID0gYFNlcnZpY2VfJHtzZXJ2aWNlLm5hbWUucmVwbGFjZSgvXFxzL2csICdfJyl9YDtcbiAgICAgICAgICAgIGRpYWdyYW0gKz0gYCR7ZGlhbG9nSWR9IC0tPiAke3NlcnZpY2VJZH1bXCIke3NlcnZpY2UubmFtZX1cIl1cXG5gO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMb2cgdGhlIGZpbmFsIGRpYWdyYW0gc3RyaW5nXG4gICAgY29uc29sZS5sb2coJ01lcm1haWQgRGlhZ3JhbTonLCBkaWFncmFtKTtcblxuICAgIC8vIENyZWF0ZSBhIG5ldyBtZXJtYWlkIGRpdlxuICAgIGNvbnN0IG1lcm1haWREaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBtZXJtYWlkRGl2LmNsYXNzTmFtZSA9ICdtZXJtYWlkJztcbiAgICBtZXJtYWlkRGl2LmlubmVySFRNTCA9IGRpYWdyYW07XG5cbiAgICByZXR1cm4gZGlhZ3JhbTtcbn1cbiJdLCJuYW1lcyI6WyJnZW5lcmF0ZU1lcm1haWRDaGFydCIsInV0dGVyYW5jZXMiLCJkaWFsb2dzIiwic2VydmljZXMiLCJkaWFncmFtIiwidXR0ZXJhbmNlQ291bnRlciIsImRpYWxvZ0NvdW50ZXIiLCJmb3JFYWNoIiwidXR0ZXJhbmNlIiwiZGlhbG9nS2V5IiwidXR0ZXJhbmNlSWQiLCJkaWFsb2dJZCIsImRpYWxvZyIsInNlcnZpY2UiLCJmaW5kIiwicyIsIm5hbWUiLCJzZXJ2aWNlS2V5Iiwic2VydmljZUlkIiwicmVwbGFjZSIsImNvbnNvbGUiLCJsb2ciLCJtZXJtYWlkRGl2IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NOYW1lIiwiaW5uZXJIVE1MIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/MermaidChart.tsx\n"));

/***/ })

});