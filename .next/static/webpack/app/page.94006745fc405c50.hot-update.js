"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/MermaidChart.tsx":
/*!*****************************************!*\
  !*** ./src/components/MermaidChart.tsx ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ generateMermaidChart; }\n/* harmony export */ });\nfunction generateMermaidChart(utterances, dialogs, services) {\n    let diagram = \"graph LR\\n\";\n    let utteranceCounter = 0;\n    let nodeSet = new Set(); // Set to track created nodes\n    // Construct diagram string for utterances and dialogs\n    utterances.forEach((utterance)=>{\n        if (utterance.dialogKey) {\n            const utteranceId = \"Utterance_\".concat(utteranceCounter++);\n            const dialogId = \"Dialog_\".concat(utterance.dialogKey);\n            // Add utterance node\n            diagram += \"\".concat(utteranceId, '[\"').concat(utterance.utterance, '\"]\\n');\n            // Add dialog node if not already added\n            if (!nodeSet.has(dialogId)) {\n                diagram += \"\".concat(dialogId, '[\"Dialog: ').concat(utterance.dialogKey, '\"]\\n');\n                nodeSet.add(dialogId);\n            }\n            // Connect utterance to dialog\n            diagram += \"\".concat(utteranceId, \" --> \").concat(dialogId, \"\\n\");\n        }\n    });\n    // Construct diagram string for dialogs and services\n    dialogs.forEach((dialog)=>{\n        const dialogId = \"Dialog_\".concat(dialog.dialogKey);\n        const service = services.find((s)=>s.name === dialog.serviceKey);\n        if (service) {\n            const serviceId = \"Service_\".concat(service.name.replace(/\\s/g, \"_\"));\n            // Add service node if not already added\n            if (!nodeSet.has(serviceId)) {\n                diagram += \"\".concat(serviceId, '[\"').concat(service.name, '\"]\\n');\n                nodeSet.add(serviceId);\n            }\n            // Connect dialog to service\n            if (nodeSet.has(dialogId)) {\n                diagram += \"\".concat(dialogId, \" --> \").concat(serviceId, \"\\n\");\n            }\n        }\n    });\n    // Log the final diagram string\n    console.log(\"Mermaid Diagram:\", diagram);\n    // Create a new mermaid div\n    const mermaidDiv = document.createElement(\"div\");\n    mermaidDiv.className = \"mermaid\";\n    mermaidDiv.innerHTML = diagram;\n    console.log(diagram);\n    return diagram;\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9jb21wb25lbnRzL01lcm1haWRDaGFydC50c3giLCJtYXBwaW5ncyI6Ijs7OztBQUFlLFNBQVNBLHFCQUFxQkMsVUFBaUIsRUFBRUMsT0FBYyxFQUFFQyxRQUFlO0lBRTNGLElBQUlDLFVBQVU7SUFDZCxJQUFJQyxtQkFBbUI7SUFDdkIsSUFBSUMsVUFBVSxJQUFJQyxPQUFPLDZCQUE2QjtJQUV0RCxzREFBc0Q7SUFDdEROLFdBQVdPLE9BQU8sQ0FBQ0MsQ0FBQUE7UUFDZixJQUFJQSxVQUFVQyxTQUFTLEVBQUU7WUFDckIsTUFBTUMsY0FBYyxhQUFnQyxPQUFuQk47WUFDakMsTUFBTU8sV0FBVyxVQUE4QixPQUFwQkgsVUFBVUMsU0FBUztZQUU5QyxxQkFBcUI7WUFDckJOLFdBQVcsR0FBbUJLLE9BQWhCRSxhQUFZLE1BQXdCLE9BQXBCRixVQUFVQSxTQUFTLEVBQUM7WUFFbEQsdUNBQXVDO1lBQ3ZDLElBQUksQ0FBQ0gsUUFBUU8sR0FBRyxDQUFDRCxXQUFXO2dCQUN4QlIsV0FBVyxHQUF3QkssT0FBckJHLFVBQVMsY0FBZ0MsT0FBcEJILFVBQVVDLFNBQVMsRUFBQztnQkFDdkRKLFFBQVFRLEdBQUcsQ0FBQ0Y7WUFDaEI7WUFFQSw4QkFBOEI7WUFDOUJSLFdBQVcsR0FBc0JRLE9BQW5CRCxhQUFZLFNBQWdCLE9BQVRDLFVBQVM7UUFDOUM7SUFDSjtJQUVBLG9EQUFvRDtJQUNwRFYsUUFBUU0sT0FBTyxDQUFDTyxDQUFBQTtRQUNaLE1BQU1ILFdBQVcsVUFBMkIsT0FBakJHLE9BQU9MLFNBQVM7UUFDM0MsTUFBTU0sVUFBVWIsU0FBU2MsSUFBSSxDQUFDQyxDQUFBQSxJQUFLQSxFQUFFQyxJQUFJLEtBQUtKLE9BQU9LLFVBQVU7UUFDL0QsSUFBSUosU0FBUztZQUNULE1BQU1LLFlBQVksV0FBNEMsT0FBakNMLFFBQVFHLElBQUksQ0FBQ0csT0FBTyxDQUFDLE9BQU87WUFFekQsd0NBQXdDO1lBQ3hDLElBQUksQ0FBQ2hCLFFBQVFPLEdBQUcsQ0FBQ1EsWUFBWTtnQkFDekJqQixXQUFXLEdBQWlCWSxPQUFkSyxXQUFVLE1BQWlCLE9BQWJMLFFBQVFHLElBQUksRUFBQztnQkFDekNiLFFBQVFRLEdBQUcsQ0FBQ087WUFDaEI7WUFFQSw0QkFBNEI7WUFDNUIsSUFBSWYsUUFBUU8sR0FBRyxDQUFDRCxXQUFXO2dCQUN2QlIsV0FBVyxHQUFtQmlCLE9BQWhCVCxVQUFTLFNBQWlCLE9BQVZTLFdBQVU7WUFDNUM7UUFDSjtJQUNKO0lBRUEsK0JBQStCO0lBQy9CRSxRQUFRQyxHQUFHLENBQUMsb0JBQW9CcEI7SUFFaEMsMkJBQTJCO0lBQzNCLE1BQU1xQixhQUFhQyxTQUFTQyxhQUFhLENBQUM7SUFDMUNGLFdBQVdHLFNBQVMsR0FBRztJQUN2QkgsV0FBV0ksU0FBUyxHQUFHekI7SUFDdkJtQixRQUFRQyxHQUFHLENBQUNwQjtJQUVaLE9BQU9BO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc3JjL2NvbXBvbmVudHMvTWVybWFpZENoYXJ0LnRzeD84YTM0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdlbmVyYXRlTWVybWFpZENoYXJ0KHV0dGVyYW5jZXM6IGFueVtdLCBkaWFsb2dzOiBhbnlbXSwgc2VydmljZXM6IGFueVtdKSB7XG5cbiAgICBsZXQgZGlhZ3JhbSA9ICdncmFwaCBMUlxcbic7XG4gICAgbGV0IHV0dGVyYW5jZUNvdW50ZXIgPSAwO1xuICAgIGxldCBub2RlU2V0ID0gbmV3IFNldCgpOyAvLyBTZXQgdG8gdHJhY2sgY3JlYXRlZCBub2Rlc1xuXG4gICAgLy8gQ29uc3RydWN0IGRpYWdyYW0gc3RyaW5nIGZvciB1dHRlcmFuY2VzIGFuZCBkaWFsb2dzXG4gICAgdXR0ZXJhbmNlcy5mb3JFYWNoKHV0dGVyYW5jZSA9PiB7XG4gICAgICAgIGlmICh1dHRlcmFuY2UuZGlhbG9nS2V5KSB7XG4gICAgICAgICAgICBjb25zdCB1dHRlcmFuY2VJZCA9IGBVdHRlcmFuY2VfJHt1dHRlcmFuY2VDb3VudGVyKyt9YDtcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZ0lkID0gYERpYWxvZ18ke3V0dGVyYW5jZS5kaWFsb2dLZXl9YDtcblxuICAgICAgICAgICAgLy8gQWRkIHV0dGVyYW5jZSBub2RlXG4gICAgICAgICAgICBkaWFncmFtICs9IGAke3V0dGVyYW5jZUlkfVtcIiR7dXR0ZXJhbmNlLnV0dGVyYW5jZX1cIl1cXG5gO1xuXG4gICAgICAgICAgICAvLyBBZGQgZGlhbG9nIG5vZGUgaWYgbm90IGFscmVhZHkgYWRkZWRcbiAgICAgICAgICAgIGlmICghbm9kZVNldC5oYXMoZGlhbG9nSWQpKSB7XG4gICAgICAgICAgICAgICAgZGlhZ3JhbSArPSBgJHtkaWFsb2dJZH1bXCJEaWFsb2c6ICR7dXR0ZXJhbmNlLmRpYWxvZ0tleX1cIl1cXG5gO1xuICAgICAgICAgICAgICAgIG5vZGVTZXQuYWRkKGRpYWxvZ0lkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29ubmVjdCB1dHRlcmFuY2UgdG8gZGlhbG9nXG4gICAgICAgICAgICBkaWFncmFtICs9IGAke3V0dGVyYW5jZUlkfSAtLT4gJHtkaWFsb2dJZH1cXG5gO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBDb25zdHJ1Y3QgZGlhZ3JhbSBzdHJpbmcgZm9yIGRpYWxvZ3MgYW5kIHNlcnZpY2VzXG4gICAgZGlhbG9ncy5mb3JFYWNoKGRpYWxvZyA9PiB7XG4gICAgICAgIGNvbnN0IGRpYWxvZ0lkID0gYERpYWxvZ18ke2RpYWxvZy5kaWFsb2dLZXl9YDtcbiAgICAgICAgY29uc3Qgc2VydmljZSA9IHNlcnZpY2VzLmZpbmQocyA9PiBzLm5hbWUgPT09IGRpYWxvZy5zZXJ2aWNlS2V5KTtcbiAgICAgICAgaWYgKHNlcnZpY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcnZpY2VJZCA9IGBTZXJ2aWNlXyR7c2VydmljZS5uYW1lLnJlcGxhY2UoL1xccy9nLCAnXycpfWA7XG5cbiAgICAgICAgICAgIC8vIEFkZCBzZXJ2aWNlIG5vZGUgaWYgbm90IGFscmVhZHkgYWRkZWRcbiAgICAgICAgICAgIGlmICghbm9kZVNldC5oYXMoc2VydmljZUlkKSkge1xuICAgICAgICAgICAgICAgIGRpYWdyYW0gKz0gYCR7c2VydmljZUlkfVtcIiR7c2VydmljZS5uYW1lfVwiXVxcbmA7XG4gICAgICAgICAgICAgICAgbm9kZVNldC5hZGQoc2VydmljZUlkKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ29ubmVjdCBkaWFsb2cgdG8gc2VydmljZVxuICAgICAgICAgICAgaWYgKG5vZGVTZXQuaGFzKGRpYWxvZ0lkKSkgeyAvLyBFbnN1cmUgZGlhbG9nIG5vZGUgZXhpc3RzXG4gICAgICAgICAgICAgICAgZGlhZ3JhbSArPSBgJHtkaWFsb2dJZH0gLS0+ICR7c2VydmljZUlkfVxcbmA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIExvZyB0aGUgZmluYWwgZGlhZ3JhbSBzdHJpbmdcbiAgICBjb25zb2xlLmxvZygnTWVybWFpZCBEaWFncmFtOicsIGRpYWdyYW0pO1xuXG4gICAgLy8gQ3JlYXRlIGEgbmV3IG1lcm1haWQgZGl2XG4gICAgY29uc3QgbWVybWFpZERpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIG1lcm1haWREaXYuY2xhc3NOYW1lID0gJ21lcm1haWQnO1xuICAgIG1lcm1haWREaXYuaW5uZXJIVE1MID0gZGlhZ3JhbTtcbiAgICBjb25zb2xlLmxvZyhkaWFncmFtKTtcblxuICAgIHJldHVybiBkaWFncmFtO1xufVxuIl0sIm5hbWVzIjpbImdlbmVyYXRlTWVybWFpZENoYXJ0IiwidXR0ZXJhbmNlcyIsImRpYWxvZ3MiLCJzZXJ2aWNlcyIsImRpYWdyYW0iLCJ1dHRlcmFuY2VDb3VudGVyIiwibm9kZVNldCIsIlNldCIsImZvckVhY2giLCJ1dHRlcmFuY2UiLCJkaWFsb2dLZXkiLCJ1dHRlcmFuY2VJZCIsImRpYWxvZ0lkIiwiaGFzIiwiYWRkIiwiZGlhbG9nIiwic2VydmljZSIsImZpbmQiLCJzIiwibmFtZSIsInNlcnZpY2VLZXkiLCJzZXJ2aWNlSWQiLCJyZXBsYWNlIiwiY29uc29sZSIsImxvZyIsIm1lcm1haWREaXYiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJpbm5lckhUTUwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/MermaidChart.tsx\n"));

/***/ })

});