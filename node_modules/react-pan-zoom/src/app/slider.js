"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
var react_redux_1 = require('react-redux');
var action_types_1 = require('./action_types');
var ReactSlider = require('react-slider');
var HostAPI = (function () {
    function HostAPI() {
        this.resetZoom = function () {
            console.log("HostAPI reset zoom");
        };
        this.zoom = function (zoomLevel) {
            console.log("HostAPI zooming to " + zoomLevel);
        };
    }
    return HostAPI;
}());
var hostAPI = new HostAPI();
var Actions = {
    resetZoom: function () {
        console.log('reset zoom action');
        hostAPI.resetZoom();
        return {
            type: action_types_1["default"].RESET_ZOOM
        };
    },
    zoom: function (direction, currentZoom) {
        console.log("zoom " + direction + " action. currentZoom: " + currentZoom);
        var zoomLevel = currentZoom;
        switch (direction) {
            case 'in':
                zoomLevel += 0.05;
                break;
            case 'out':
                zoomLevel -= 0.05;
                break;
        }
        hostAPI.zoom(currentZoom);
        return {
            type: action_types_1["default"].SET_ZOOM_LEVEL,
            zoomLevel: zoomLevel
        };
    }
};
var mapStateToProps = function (state) {
    console.log('stateToProps: ', state);
    return {
        zoomLevel: state.zoomLevel
    };
};
var mapDispatchToProps = function (dispatch) {
    console.log('dispatchToProps: ', dispatch);
    return {
        resetZoom: function () {
            dispatch(Actions.resetZoom());
        },
        zoom: function (direction, zoomLevel) {
            dispatch(Actions.zoom(direction, zoomLevel));
        }
    };
};
// @connect<any, any, any>(
//   mapStateToProps,
//   mapDispatchToProps
// )
var SliderComp = (function (_super) {
    __extends(SliderComp, _super);
    function SliderComp(props) {
        _super.call(this, props);
    }
    SliderComp.prototype.sliderMove = function (value) {
        console.log('move. ', value);
        console.log('move props: ', this.props.zoomLevel);
        this.props.zoom('set', value);
    };
    SliderComp.prototype.render = function () {
        var _this = this;
        var legacy = false;
        return (React.createElement("div", null, React.createElement("div", {className: "cy-panzoom-reset cy-panzoom-zoom-button", onClick: this.props.resetZoom}, React.createElement("span", {className: "icon fa fa-expand"})), React.createElement("div", {className: "cy-panzoom-zoom-in cy-panzoom-zoom-button", onClick: function () { return _this.props.zoom('in', _this.props.zoomLevel); }}, React.createElement("span", {className: "icon fa fa-plus"})), React.createElement("div", {className: "cy-panzoom-zoom-out cy-panzoom-zoom-button", onClick: function () { return _this.props.zoom('out', _this.props.zoomLevel); }}, React.createElement("span", {className: "icon fa fa-minus"})), legacy ? React.createElement("div", {className: "cy-panzoom-slider"}, React.createElement("div", {className: "cy-panzoom-slider-background"}), React.createElement("div", {className: "cy-panzoom-slider-handle", style: { top: '32.2203px' }}, React.createElement("span", {className: "icon fa fa-minus"})), React.createElement("div", {className: "cy-panzoom-no-zoom-tick", style: { top: 43 }})) : null, React.createElement("div", {className: "cy-panzoom-no-zoom-tick", style: { top: '43px', display: 'none' }}), React.createElement(ReactSlider, {className: "cy-panzoom-slider", barClassName: "cy-panzoom-slider-background", orientation: 'vertical', value: this.props.zoomLevel, min: -1, max: 1, step: 0.05, minDistance: 20, withBars: true, invert: true, onChange: function (v) { return _this.sliderMove(v); }}, React.createElement("div", {className: "cy-panzoom-slider-handle-wrapper"}, React.createElement("div", {className: "cy-panzoom-slider-handle"}, React.createElement("span", {className: "icon fa fa-minus"}))))));
    };
    return SliderComp;
}(React.Component));
var Slider = react_redux_1.connect(//TODO: use specific types
mapStateToProps, mapDispatchToProps)(SliderComp);
exports.__esModule = true;
exports["default"] = Slider;
