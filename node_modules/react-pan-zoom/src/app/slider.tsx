import * as React from 'react';
import {connect} from 'react-redux';
import ActionTypes from './action_types';
const ReactSlider = require('react-slider');

class HostAPI {
  pan: Function;
  resetZoom: Function = () => {
    console.log(`HostAPI reset zoom`);
  };
  zoom: Function      = (zoomLevel) => {
    console.log(`HostAPI zooming to ${zoomLevel}`);
  };
}

const hostAPI = new HostAPI();

const Actions = {
  resetZoom: () => {
    console.log('reset zoom action');
    hostAPI.resetZoom();

    return {
      type: ActionTypes.RESET_ZOOM
    }
  },
  zoom: (direction: 'in' | 'out | set', currentZoom: number) => {
    console.log(`zoom ${direction} action. currentZoom: ${currentZoom}`);
    let zoomLevel = currentZoom;

    switch (direction) {
      case 'in':
        zoomLevel += 0.05;
        break;
      case 'out':
        zoomLevel -= 0.05;
        break;
    }
    hostAPI.zoom(currentZoom);

    return {
      type: ActionTypes.SET_ZOOM_LEVEL,
      zoomLevel
    }
  }
};

const mapStateToProps = (state) => {
  console.log('stateToProps: ', state);
  return {
    zoomLevel: state.zoomLevel
  }
};

const mapDispatchToProps = (dispatch) => {
  console.log('dispatchToProps: ', dispatch);
  return {
    resetZoom: () => {
      dispatch(Actions.resetZoom());
    },
    zoom: (direction, zoomLevel) => {
      dispatch(Actions.zoom(direction, zoomLevel));
    },
  }
};

interface SliderProps extends React.Props<any> {
  resetZoom: Function;
  zoom: Function;
  zoomLevel: number;
}

interface SliderState {
  zoomValue: number;
}

// @connect<any, any, any>(
//   mapStateToProps,
//   mapDispatchToProps
// )
class SliderComp extends React.Component<SliderProps, SliderState> {

  constructor (props) {
    super(props);
  }

  sliderMove (value) {
    console.log('move. ', value);
    console.log('move props: ', this.props.zoomLevel);

    this.props.zoom('set', value);
  }

  render () {

    const legacy = false;

    return (
      <div>
        <div className="cy-panzoom-reset cy-panzoom-zoom-button" onClick={this.props.resetZoom}>
          <span className="icon fa fa-expand"/>
        </div>
        <div className="cy-panzoom-zoom-in cy-panzoom-zoom-button"
             onClick={() => this.props.zoom('in', this.props.zoomLevel)}>
          <span className="icon fa fa-plus"/>
        </div>
        <div className="cy-panzoom-zoom-out cy-panzoom-zoom-button"
             onClick={() => this.props.zoom('out', this.props.zoomLevel)}>
          <span className="icon fa fa-minus"/>
        </div>

        {legacy ? <div className="cy-panzoom-slider">
          <div className="cy-panzoom-slider-background"/>
          <div className="cy-panzoom-slider-handle" style={{top: '32.2203px'}}>
            <span className="icon fa fa-minus"/>
          </div>
          <div className="cy-panzoom-no-zoom-tick" style={{top: 43}}/>
        </div> : null}

        <div className="cy-panzoom-no-zoom-tick" style={{top: '43px', display: 'none'}}></div>
        <ReactSlider
          className="cy-panzoom-slider"
          barClassName="cy-panzoom-slider-background"
          orientation={'vertical'}
          value={this.props.zoomLevel}
          min={-1}
          max={1}
          step={0.05}
          minDistance={20}
          withBars={true}
          invert={true}
          onChange={(v) => this.sliderMove(v)}>
          <div className="cy-panzoom-slider-handle-wrapper">
            <div className="cy-panzoom-slider-handle">
              <span className="icon fa fa-minus"/>
            </div>
          </div>
        </ReactSlider>
      </div>
    )
  }
}

const Slider = connect <any, any, any>( //TODO: use specific types
  mapStateToProps,
  mapDispatchToProps
)(SliderComp);

export default Slider;